(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
				 (- (upper-bound x) (lower-bound y))))

(define (mul-interval x y)
  (let ((lbx (lower-bound x))
		(ubx (upper-bound x))
		(lby (lower-bound y))
		(uby (upper-bound y)))
	(let ((slbx (positive? lbx))
		  (subx (positive? ubx))
		  (slby (positive? lby))
		  (suby (positive? uby)))
    	(cond ((and slbx subx slby suby)
  		   (make-interval (* lbx lby) (* ubx uby)))
  		  ((and (not slbx) subx slby suby)
  		   (make-interval (* lbx uby) (* ubx uby)))
  		  ((and slbx subx (not slby) suby)
  		   (make-interval (* lby ubx) (* uby ubx)))
  		  ((and (not slbx) (not subx) slby suby)
  		   (make-interval (* lbx uby) (* ubx lby)))
  		  ((and slbx subx (not slby) (not suby))
  		   (make-interval (* lby ubx) (* uby lbx)))
  		  ((and (not slbx) (not subx) (not slby) suby)
  		   (make-interval (* lbx uby) (* lbx lby)))
  		  ((and (not slbx) subx (not slby) (not suby))
  		   (make-interval (* lby ubx) (* lby lbx)))
  		  ((and (not slbx) (not subx) (not slby) (not suby))
  		   (make-interval (* ubx uby) (* lbx lby)))
  		  (else (let ((p1 (* lbx lby))
  					  (p2 (* lbx uby))
  					  (p3 (* ubx lby))
  					  (p4 (* ubx uby)))
  					  (make-interval (min p1 p2 p3 p4)
  									 (max p1 p2 p3 p4))))))))

(define (div-interval x y)
  (if (and (<= (lower-bound y) 0) (>= (upper-bound y) 0))
	(error "division by zero")
    (mul-interval x 
                  (make-interval (/ 1.0 (upper-bound y))
                                 (/ 1.0 (lower-bound y))))))

(define (make-center-percent center tolerance)
  (define width (* center (/ tolerance 100.0)))
  (make-interval (- center width) (+ center width)))

(define (make-interval a b) (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define (center interval)
  (/ (+ (lower-bound interval) (upper-bound interval)) 2.0))

(define (percent interval)
  (* 100 (- 1 (/ (lower-bound interval) (center interval)))))
